// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module SPIFlashMap(
  input         clock,
                reset,
                io_en,
  input  [1:0]  io_ctrl_insn_cmd_proto,
  input  [7:0]  io_ctrl_insn_cmd_code,
  input         io_ctrl_insn_cmd_en,
  input  [1:0]  io_ctrl_insn_addr_proto,
  input  [2:0]  io_ctrl_insn_addr_len,
  input  [7:0]  io_ctrl_insn_pad_code,
  input  [3:0]  io_ctrl_insn_pad_cnt,
  input  [1:0]  io_ctrl_insn_data_proto,
  input         io_ctrl_fmt_endian,
                io_addr_valid,
  input  [31:0] io_addr_bits_next,
                io_addr_bits_hold,
  input         io_data_ready,
                io_link_tx_ready,
                io_link_rx_valid,
  input  [7:0]  io_link_rx_bits,
  input         io_link_active,
  output        io_addr_ready,
                io_data_valid,
  output [7:0]  io_data_bits,
  output        io_link_tx_valid,
  output [7:0]  io_link_tx_bits,
                io_link_cnt,
  output [1:0]  io_link_fmt_proto,
  output        io_link_fmt_endian,
                io_link_fmt_iodir,
                io_link_cs_clear,
                io_link_lock
);

  wire [1:0]      _io_link_fmt_proto_output;	// @[SPIFlash.scala:63:21, :96:18]
  wire            cnt_en;	// @[SPIFlash.scala:96:18, compatibility.scala:76:26]
  wire            merge = io_link_active & io_addr_bits_next == io_addr_bits_hold + 32'h1;	// @[SPIFlash.scala:58:32, :59:{30,52}]
  reg  [3:0]      cnt;	// @[SPIFlash.scala:80:16]
  wire            cnt_cmp_1 = cnt == 4'h1;	// @[SPIFlash.scala:80:16, :82:48]
  reg  [2:0]      state;	// @[SPIFlash.scala:94:18]
  wire            _T_1 = state == 3'h0;	// @[SPIFlash.scala:94:18, :96:18]
  wire            _T_2 = state == 3'h1;	// @[SPIFlash.scala:94:18, :96:18, :105:25]
  wire            _T_3 = state == 3'h2;	// @[SPIFlash.scala:94:18, :96:18, :105:25]
  assign cnt_en = ~(_T_1 | _T_2) & _T_3;	// @[SPIFlash.scala:96:18, compatibility.scala:76:26]
  wire            _T_4 = state == 3'h3;	// @[SPIFlash.scala:94:18, :96:18, :139:15]
  wire            _T_5 = state == 3'h4;	// @[Mux.scala:27:73, SPIFlash.scala:94:18, :96:18]
  wire            _GEN = _T_3 | _T_4;	// @[SPIFlash.scala:63:21, :96:18]
  assign _io_link_fmt_proto_output = _T_1 ? io_ctrl_insn_addr_proto : _T_2 ? io_ctrl_insn_cmd_proto : _GEN | ~_T_5 ? io_ctrl_insn_addr_proto : io_ctrl_insn_data_proto;	// @[SPIFlash.scala:63:21, :96:18, :121:25]
  wire            _T_6 = state == 3'h5;	// @[SPIFlash.scala:94:18, :96:18, :156:15]
  wire            _GEN_0 = _T_2 | _T_3 | _T_4 | _T_5;	// @[SPIFlash.scala:86:17, :96:18]
  wire            _io_link_tx_valid_output = ~_T_1 & (_GEN_0 | ~_T_6) & (~cnt_en | (|cnt));	// @[SPIFlash.scala:62:20, :73:16, :80:16, :82:48, :86:17, :87:22, :96:18, :98:24, :99:20, :161:24, compatibility.scala:76:26]
  wire            _T_8 = state == 3'h6;	// @[SPIFlash.scala:94:18, :96:18, :115:17]
  wire            _io_data_valid_output = ~(_T_1 | _GEN_0) & (_T_6 ? io_link_rx_valid : _T_8);	// @[SPIFlash.scala:77:17, :86:17, :96:18, :162:21]
  wire [2:0]      _GEN_1 = (_T_6 ? io_data_ready & _io_data_valid_output : _T_8 & io_data_ready) ? 3'h0 : state;	// @[Decoupled.scala:51:35, SPIFlash.scala:77:17, :94:18, :96:18, :163:27, :164:15, :171:28, :172:15]
  wire [7:0][2:0] _GEN_2 = {{_GEN_1}, {_GEN_1}, {_GEN_1}, {io_link_tx_ready ? 3'h5 : state}, {io_link_tx_ready ? 3'h4 : state}, {cnt_cmp_1 & io_link_tx_ready | ~(|cnt) ? 3'h3 : state}, {io_link_tx_ready ? 3'h2 : state}, {io_addr_valid ? (io_en ? (merge ? 3'h4 : io_ctrl_insn_cmd_en ? 3'h1 : 3'h2) : 3'h6) : state}};	// @[Mux.scala:27:73, SPIFlash.scala:59:30, :80:16, :82:48, :84:29, :85:27, :94:18, :96:18, :99:20, :101:30, :102:24, :103:19, :105:{19,25}, :114:30, :115:17, :123:31, :124:15, :138:23, :139:15, :147:31, :148:15, :155:31, :156:15, :163:27]
  always @(posedge clock) begin
    if (_T_1 | ~(_T_2 & io_link_tx_ready)) begin	// @[SPIFlash.scala:86:17, :96:18, :123:31, :125:13]
      if (cnt_en & io_link_tx_ready & _io_link_tx_valid_output)	// @[SPIFlash.scala:80:16, :86:17, :88:28, :89:11, :96:18, :98:24, compatibility.scala:76:26]
        cnt <= cnt - 4'h1;	// @[SPIFlash.scala:80:16, :89:18]
    end
    else	// @[SPIFlash.scala:86:17, :96:18]
      cnt <= {1'h0, io_ctrl_insn_addr_len};	// @[Mux.scala:27:73, SPIFlash.scala:80:16, :125:13]
    if (reset)
      state <= 3'h0;	// @[SPIFlash.scala:94:18]
    else
      state <= _GEN_2[state];	// @[SPIFlash.scala:94:18, :96:18, :99:20, :123:31, :138:23, :147:31, :155:31]
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        cnt = _RANDOM_0[3:0];	// @[SPIFlash.scala:80:16]
        state = _RANDOM_0[6:4];	// @[SPIFlash.scala:80:16, :94:18]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_addr_ready = _T_1;	// @[SPIFlash.scala:96:18]
  assign io_data_valid = _io_data_valid_output;	// @[SPIFlash.scala:77:17, :96:18]
  assign io_data_bits = _T_1 | _T_2 | _T_3 | _T_4 | _T_5 | _T_6 | ~_T_8 ? io_link_rx_bits : 8'h0;	// @[Mux.scala:27:73, SPIFlash.scala:78:16, :96:18]
  assign io_link_tx_valid = _io_link_tx_valid_output;	// @[SPIFlash.scala:96:18, :98:24]
  assign io_link_tx_bits = _T_2 ? io_ctrl_insn_cmd_code : _T_3 ? (cnt_cmp_1 ? io_addr_bits_hold[7:0] : 8'h0) | (cnt == 4'h2 ? io_addr_bits_hold[15:8] : 8'h0) | (cnt == 4'h3 ? io_addr_bits_hold[23:16] : 8'h0) | (cnt == 4'h4 ? io_addr_bits_hold[31:24] : 8'h0) : io_ctrl_insn_pad_code;	// @[Mux.scala:27:73, SPIFlash.scala:80:16, :82:48, :96:18, :122:23, :130:23, :134:33]
  assign io_link_cnt = {4'h0, _T_1 | _T_2 | _T_3 | ~_T_4 ? {_io_link_fmt_proto_output == 2'h0, _io_link_fmt_proto_output == 2'h1, _io_link_fmt_proto_output == 2'h2, 1'h0} : io_ctrl_insn_pad_cnt};	// @[Mux.scala:27:73, SPIConsts.scala:12:48, SPIFlash.scala:63:21, :66:15, :96:18]
  assign io_link_fmt_proto = _io_link_fmt_proto_output;	// @[SPIFlash.scala:63:21, :96:18]
  assign io_link_fmt_endian = io_ctrl_fmt_endian;
  assign io_link_fmt_iodir = _T_1 | _T_2 | _GEN | ~_T_5;	// @[SPIFlash.scala:63:21, :64:21, :96:18]
  assign io_link_cs_clear = _T_1 & io_en & io_addr_valid & ~merge;	// @[SPIFlash.scala:59:30, :71:20, :96:18, :99:20, :101:30, :102:24, :106:30]
  assign io_link_lock = ~_T_1 | io_en & io_addr_valid;	// @[SPIFlash.scala:73:16, :96:18, :99:20, :101:30, :113:22]
endmodule

