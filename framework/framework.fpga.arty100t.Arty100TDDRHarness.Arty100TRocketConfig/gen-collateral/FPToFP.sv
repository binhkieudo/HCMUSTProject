// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module FPToFP(
  input         clock,
                reset,
                io_in_valid,
                io_in_bits_wflags,
  input  [2:0]  io_in_bits_rm,
  input  [32:0] io_in_bits_in1,
                io_in_bits_in2,
  input         io_lt,
  output [32:0] io_out_bits_data,
  output [4:0]  io_out_bits_exc
);

  reg        inPipe_valid;	// @[Valid.scala:130:22]
  reg        inPipe_bits_wflags;	// @[Reg.scala:19:16]
  reg [2:0]  inPipe_bits_rm;	// @[Reg.scala:19:16]
  reg [32:0] inPipe_bits_in1;	// @[Reg.scala:19:16]
  reg [32:0] inPipe_bits_in2;	// @[Reg.scala:19:16]
  reg [32:0] io_out_b_data;	// @[Reg.scala:19:16]
  reg [4:0]  io_out_b_exc;	// @[Reg.scala:19:16]
  always @(posedge clock) begin
    if (reset)
      inPipe_valid <= 1'h0;	// @[Valid.scala:130:22]
    else
      inPipe_valid <= io_in_valid;	// @[Valid.scala:130:22]
    if (io_in_valid) begin
      inPipe_bits_wflags <= io_in_bits_wflags;	// @[Reg.scala:19:16]
      inPipe_bits_rm <= io_in_bits_rm;	// @[Reg.scala:19:16]
      inPipe_bits_in1 <= io_in_bits_in1;	// @[Reg.scala:19:16]
      inPipe_bits_in2 <= io_in_bits_in2;	// @[Reg.scala:19:16]
    end
    if (inPipe_valid) begin	// @[Valid.scala:130:22]
      if (inPipe_bits_wflags) begin	// @[Reg.scala:19:16]
        if ((&(inPipe_bits_in1[31:29])) & (&(inPipe_bits_in2[31:29])))	// @[FPU.scala:243:{25,56}, :586:27, Reg.scala:19:16]
          io_out_b_data <= 33'hE0400000;	// @[FPU.scala:589:25, Reg.scala:19:16]
        else if ((&(inPipe_bits_in2[31:29])) | inPipe_bits_rm[0] != io_lt & ~(&(inPipe_bits_in1[31:29])))	// @[FPU.scala:243:{25,56}, :575:77, :587:{24,41,51,54}, Reg.scala:19:16]
          io_out_b_data <= inPipe_bits_in1;	// @[Reg.scala:19:16]
        else	// @[FPU.scala:587:24]
          io_out_b_data <= inPipe_bits_in2;	// @[Reg.scala:19:16]
        io_out_b_exc <= {(&(inPipe_bits_in1[31:29])) & ~(inPipe_bits_in1[22]) | (&(inPipe_bits_in2[31:29])) & ~(inPipe_bits_in2[22]), 4'h0};	// @[FPU.scala:243:{25,56}, :244:{34,37,39}, :585:49, :588:31, Reg.scala:19:16]
      end
      else begin	// @[Reg.scala:19:16]
        io_out_b_data <= {inPipe_bits_rm[1] ? inPipe_bits_in1[32] ^ inPipe_bits_in2[32] : inPipe_bits_rm[0] ^ inPipe_bits_in2[32], inPipe_bits_in1[31:0]};	// @[Cat.scala:33:92, FPU.scala:575:{20,31,48,66,77}, :576:45, Reg.scala:19:16]
        io_out_b_exc <= 5'h0;	// @[FPU.scala:579:16, Reg.scala:19:16]
      end
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    logic [31:0] _RANDOM_5;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        inPipe_valid = _RANDOM_0[0];	// @[Valid.scala:130:22]
        inPipe_bits_wflags = _RANDOM_0[18];	// @[Reg.scala:19:16, Valid.scala:130:22]
        inPipe_bits_rm = _RANDOM_0[21:19];	// @[Reg.scala:19:16, Valid.scala:130:22]
        inPipe_bits_in1 = {_RANDOM_0[31:28], _RANDOM_1[28:0]};	// @[Reg.scala:19:16, Valid.scala:130:22]
        inPipe_bits_in2 = {_RANDOM_1[31:29], _RANDOM_2[29:0]};	// @[Reg.scala:19:16]
        io_out_b_data = {_RANDOM_4, _RANDOM_5[0]};	// @[Reg.scala:19:16]
        io_out_b_exc = _RANDOM_5[5:1];	// @[Reg.scala:19:16]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_out_bits_data = io_out_b_data;	// @[Reg.scala:19:16]
  assign io_out_bits_exc = io_out_b_exc;	// @[Reg.scala:19:16]
endmodule

