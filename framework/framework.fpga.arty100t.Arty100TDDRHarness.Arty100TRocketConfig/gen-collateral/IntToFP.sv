// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module IntToFP(
  input         clock,
                reset,
                io_in_valid,
                io_in_bits_wflags,
  input  [2:0]  io_in_bits_rm,
  input  [1:0]  io_in_bits_typ,
  input  [63:0] io_in_bits_in1,
  output [32:0] io_out_bits_data,
  output [4:0]  io_out_bits_exc
);

  wire [32:0] _i2f_io_out;	// @[FPU.scala:549:23]
  wire [4:0]  _i2f_io_exceptionFlags;	// @[FPU.scala:549:23]
  reg         inPipe_valid;	// @[Valid.scala:130:22]
  reg         inPipe_bits_wflags;	// @[Reg.scala:19:16]
  reg  [2:0]  inPipe_bits_rm;	// @[Reg.scala:19:16]
  reg  [1:0]  inPipe_bits_typ;	// @[Reg.scala:19:16]
  reg  [63:0] inPipe_bits_in1;	// @[Reg.scala:19:16]
  reg  [32:0] io_out_b_data;	// @[Reg.scala:19:16]
  reg  [4:0]  io_out_b_exc;	// @[Reg.scala:19:16]
  wire        mux_data_rawIn_isZeroExpIn = inPipe_bits_in1[30:23] == 8'h0;	// @[Reg.scala:19:16, rawFloatFromFN.scala:47:23, :50:34]
  wire [4:0]  mux_data_rawIn_normDist = inPipe_bits_in1[22] ? 5'h0 : inPipe_bits_in1[21] ? 5'h1 : inPipe_bits_in1[20] ? 5'h2 : inPipe_bits_in1[19] ? 5'h3 : inPipe_bits_in1[18] ? 5'h4 : inPipe_bits_in1[17] ? 5'h5 : inPipe_bits_in1[16] ? 5'h6 : inPipe_bits_in1[15] ? 5'h7 : inPipe_bits_in1[14] ? 5'h8 : inPipe_bits_in1[13] ? 5'h9 : inPipe_bits_in1[12] ? 5'hA : inPipe_bits_in1[11] ? 5'hB : inPipe_bits_in1[10] ? 5'hC : inPipe_bits_in1[9] ? 5'hD : inPipe_bits_in1[8] ? 5'hE : inPipe_bits_in1[7] ? 5'hF : inPipe_bits_in1[6] ? 5'h10 : inPipe_bits_in1[5] ? 5'h11 : inPipe_bits_in1[4] ? 5'h12 : inPipe_bits_in1[3] ? 5'h13 : inPipe_bits_in1[2] ? 5'h14 : inPipe_bits_in1[1] ? 5'h15 : 5'h16;	// @[FPU.scala:531:11, Mux.scala:47:70, Reg.scala:19:16, primitives.scala:92:52, rawFloatFromFN.scala:48:25]
  wire [8:0]  mux_data_rawIn_adjustedExp = (mux_data_rawIn_isZeroExpIn ? {4'hF, ~mux_data_rawIn_normDist} : {1'h0, inPipe_bits_in1[30:23]}) + {7'h20, mux_data_rawIn_isZeroExpIn ? 2'h2 : 2'h1};	// @[Mux.scala:47:70, Reg.scala:19:16, Valid.scala:130:22, rawFloatFromFN.scala:47:23, :50:34, :56:16, :57:26, :59:15, :60:27]
  wire [53:0] _mux_data_rawIn_subnormFract_T = {31'h0, inPipe_bits_in1[22:0]} << mux_data_rawIn_normDist;	// @[Mux.scala:47:70, Reg.scala:19:16, rawFloatFromFN.scala:48:25, :54:36]
  always @(posedge clock) begin
    if (reset)
      inPipe_valid <= 1'h0;	// @[Valid.scala:130:22]
    else
      inPipe_valid <= io_in_valid;	// @[Valid.scala:130:22]
    if (io_in_valid) begin
      inPipe_bits_wflags <= io_in_bits_wflags;	// @[Reg.scala:19:16]
      inPipe_bits_rm <= io_in_bits_rm;	// @[Reg.scala:19:16]
      inPipe_bits_typ <= io_in_bits_typ;	// @[Reg.scala:19:16]
      inPipe_bits_in1 <= io_in_bits_in1;	// @[Reg.scala:19:16]
    end
    if (inPipe_valid) begin	// @[Valid.scala:130:22]
      if (inPipe_bits_wflags) begin	// @[Reg.scala:19:16]
        io_out_b_data <= _i2f_io_out;	// @[FPU.scala:549:23, Reg.scala:19:16]
        io_out_b_exc <= _i2f_io_exceptionFlags;	// @[FPU.scala:549:23, Reg.scala:19:16]
      end
      else begin	// @[Reg.scala:19:16]
        io_out_b_data <= {inPipe_bits_in1[31], (mux_data_rawIn_isZeroExpIn & ~(|(inPipe_bits_in1[22:0])) ? 3'h0 : mux_data_rawIn_adjustedExp[8:6]) | {2'h0, (&(mux_data_rawIn_adjustedExp[8:7])) & (|(inPipe_bits_in1[22:0]))}, mux_data_rawIn_adjustedExp[5:0], mux_data_rawIn_isZeroExpIn ? {_mux_data_rawIn_subnormFract_T[21:0], 1'h0} : inPipe_bits_in1[22:0]};	// @[Cat.scala:33:92, Reg.scala:19:16, Valid.scala:130:22, rawFloatFromFN.scala:46:22, :48:25, :50:34, :51:38, :54:{36,47,64}, :59:15, :62:34, :63:{37,62}, :66:33, :72:42, recFNFromFN.scala:48:{16,53,79}, :50:23]
        io_out_b_exc <= 5'h0;	// @[FPU.scala:531:11, Reg.scala:19:16]
      end
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        inPipe_valid = _RANDOM_0[0];	// @[Valid.scala:130:22]
        inPipe_bits_wflags = _RANDOM_0[18];	// @[Reg.scala:19:16, Valid.scala:130:22]
        inPipe_bits_rm = _RANDOM_0[21:19];	// @[Reg.scala:19:16, Valid.scala:130:22]
        inPipe_bits_typ = _RANDOM_0[23:22];	// @[Reg.scala:19:16, Valid.scala:130:22]
        inPipe_bits_in1 = {_RANDOM_0[31:24], _RANDOM_1, _RANDOM_2[23:0]};	// @[Reg.scala:19:16, Valid.scala:130:22]
        io_out_b_data = {_RANDOM_2[31:25], _RANDOM_3[25:0]};	// @[Reg.scala:19:16]
        io_out_b_exc = _RANDOM_3[30:26];	// @[Reg.scala:19:16]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  INToRecFN i2f (	// @[FPU.scala:549:23]
    .io_signedIn       (~(inPipe_bits_typ[0])),	// @[FPU.scala:550:{26,38}, Reg.scala:19:16]
    .io_in             (inPipe_bits_typ[1] ? inPipe_bits_in1 : {{32{~(inPipe_bits_typ[0]) & inPipe_bits_in1[31]}}, inPipe_bits_in1[31:0]}),	// @[FPU.scala:535:26, :537:33, :538:66, :539:{13,19,31}, Reg.scala:19:16, package.scala:155:13]
    .io_roundingMode   (inPipe_bits_rm),	// @[Reg.scala:19:16]
    .io_out            (_i2f_io_out),
    .io_exceptionFlags (_i2f_io_exceptionFlags)
  );
  assign io_out_bits_data = io_out_b_data;	// @[Reg.scala:19:16]
  assign io_out_bits_exc = io_out_b_exc;	// @[Reg.scala:19:16]
endmodule

