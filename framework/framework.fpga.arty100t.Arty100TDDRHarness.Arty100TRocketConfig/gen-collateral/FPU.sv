// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module FPU(
  input         clock,
                reset,
  input  [31:0] io_inst,
  input  [63:0] io_fromint_data,
  input  [2:0]  io_fcsr_rm,
  input         io_dmem_resp_val,
  input  [4:0]  io_dmem_resp_tag,
  input  [31:0] io_dmem_resp_data,
  input         io_valid,
                io_killx,
                io_killm,
  output        io_fcsr_flags_valid,
  output [4:0]  io_fcsr_flags_bits,
  output [31:0] io_store_data,
  output [63:0] io_toint_data,
  output        io_fcsr_rdy,
                io_nack_mem,
                io_illegal_rm,
                io_dec_wen,
                io_dec_ren1,
                io_dec_ren2,
                io_dec_ren3,
                io_sboard_set
);

  wire [32:0] _fpmu_io_out_bits_data;	// @[FPU.scala:862:20]
  wire [4:0]  _fpmu_io_out_bits_exc;	// @[FPU.scala:862:20]
  wire [32:0] _ifpu_io_out_bits_data;	// @[FPU.scala:857:20]
  wire [4:0]  _ifpu_io_out_bits_exc;	// @[FPU.scala:857:20]
  wire        _fpiu_io_out_bits_lt;	// @[FPU.scala:847:20]
  wire [4:0]  _fpiu_io_out_bits_exc;	// @[FPU.scala:847:20]
  wire [32:0] _sfma_io_out_bits_data;	// @[FPU.scala:843:20]
  wire [4:0]  _sfma_io_out_bits_exc;	// @[FPU.scala:843:20]
  wire [32:0] _regfile_ext_R0_data;	// @[FPU.scala:793:20]
  wire [32:0] _regfile_ext_R1_data;	// @[FPU.scala:793:20]
  wire [32:0] _regfile_ext_R2_data;	// @[FPU.scala:793:20]
  wire        _fp_decoder_io_sigs_ren1;	// @[FPU.scala:739:26]
  wire        _fp_decoder_io_sigs_ren2;	// @[FPU.scala:739:26]
  wire        _fp_decoder_io_sigs_ren3;	// @[FPU.scala:739:26]
  wire        _fp_decoder_io_sigs_swap12;	// @[FPU.scala:739:26]
  wire        _fp_decoder_io_sigs_swap23;	// @[FPU.scala:739:26]
  wire [1:0]  _fp_decoder_io_sigs_typeTagOut;	// @[FPU.scala:739:26]
  wire        _fp_decoder_io_sigs_fromint;	// @[FPU.scala:739:26]
  wire        _fp_decoder_io_sigs_toint;	// @[FPU.scala:739:26]
  wire        _fp_decoder_io_sigs_fastpipe;	// @[FPU.scala:739:26]
  wire        _fp_decoder_io_sigs_fma;	// @[FPU.scala:739:26]
  wire        _fp_decoder_io_sigs_div;	// @[FPU.scala:739:26]
  wire        _fp_decoder_io_sigs_sqrt;	// @[FPU.scala:739:26]
  wire        _fp_decoder_io_sigs_wflags;	// @[FPU.scala:739:26]
  reg         ex_reg_valid;	// @[FPU.scala:743:29]
  reg  [31:0] ex_reg_inst;	// @[Reg.scala:19:16]
  reg         ex_reg_ctrl_ren2;	// @[Reg.scala:19:16]
  reg         ex_reg_ctrl_ren3;	// @[Reg.scala:19:16]
  reg         ex_reg_ctrl_swap23;	// @[Reg.scala:19:16]
  reg  [1:0]  ex_reg_ctrl_typeTagOut;	// @[Reg.scala:19:16]
  reg         ex_reg_ctrl_fromint;	// @[Reg.scala:19:16]
  reg         ex_reg_ctrl_toint;	// @[Reg.scala:19:16]
  reg         ex_reg_ctrl_fastpipe;	// @[Reg.scala:19:16]
  reg         ex_reg_ctrl_fma;	// @[Reg.scala:19:16]
  reg         ex_reg_ctrl_div;	// @[Reg.scala:19:16]
  reg         ex_reg_ctrl_sqrt;	// @[Reg.scala:19:16]
  reg         ex_reg_ctrl_wflags;	// @[Reg.scala:19:16]
  reg  [4:0]  ex_ra_0;	// @[FPU.scala:746:31]
  reg  [4:0]  ex_ra_1;	// @[FPU.scala:746:31]
  reg  [4:0]  ex_ra_2;	// @[FPU.scala:746:31]
  reg         load_wb;	// @[FPU.scala:749:24]
  reg  [31:0] load_wb_data;	// @[Reg.scala:19:16]
  reg  [4:0]  load_wb_tag;	// @[Reg.scala:19:16]
  reg         mem_reg_valid;	// @[FPU.scala:760:30]
  reg  [31:0] mem_reg_inst;	// @[Reg.scala:19:16]
  reg         wb_reg_valid;	// @[FPU.scala:768:29]
  reg  [1:0]  mem_ctrl_typeTagOut;	// @[Reg.scala:19:16]
  reg         mem_ctrl_fromint;	// @[Reg.scala:19:16]
  reg         mem_ctrl_toint;	// @[Reg.scala:19:16]
  reg         mem_ctrl_fastpipe;	// @[Reg.scala:19:16]
  reg         mem_ctrl_fma;	// @[Reg.scala:19:16]
  reg         mem_ctrl_div;	// @[Reg.scala:19:16]
  reg         mem_ctrl_sqrt;	// @[Reg.scala:19:16]
  reg         mem_ctrl_wflags;	// @[Reg.scala:19:16]
  reg         wb_ctrl_toint;	// @[Reg.scala:19:16]
  wire        wdata_rawIn_isZeroExpIn = load_wb_data[30:23] == 8'h0;	// @[Reg.scala:19:16, rawFloatFromFN.scala:47:23, :50:34]
  wire [4:0]  wdata_rawIn_normDist = load_wb_data[22] ? 5'h0 : load_wb_data[21] ? 5'h1 : load_wb_data[20] ? 5'h2 : load_wb_data[19] ? 5'h3 : load_wb_data[18] ? 5'h4 : load_wb_data[17] ? 5'h5 : load_wb_data[16] ? 5'h6 : load_wb_data[15] ? 5'h7 : load_wb_data[14] ? 5'h8 : load_wb_data[13] ? 5'h9 : load_wb_data[12] ? 5'hA : load_wb_data[11] ? 5'hB : load_wb_data[10] ? 5'hC : load_wb_data[9] ? 5'hD : load_wb_data[8] ? 5'hE : load_wb_data[7] ? 5'hF : load_wb_data[6] ? 5'h10 : load_wb_data[5] ? 5'h11 : load_wb_data[4] ? 5'h12 : load_wb_data[3] ? 5'h13 : load_wb_data[2] ? 5'h14 : load_wb_data[1] ? 5'h15 : 5'h16;	// @[Mux.scala:47:70, Reg.scala:19:16, primitives.scala:92:52, rawFloatFromFN.scala:48:25]
  wire [53:0] _wdata_rawIn_subnormFract_T = {31'h0, load_wb_data[22:0]} << wdata_rawIn_normDist;	// @[Mux.scala:47:70, Reg.scala:19:16, rawFloatFromFN.scala:48:25, :54:36]
  wire [8:0]  wdata_rawIn_adjustedExp = (wdata_rawIn_isZeroExpIn ? {4'hF, ~wdata_rawIn_normDist} : {1'h0, load_wb_data[30:23]}) + {7'h20, wdata_rawIn_isZeroExpIn ? 2'h2 : 2'h1};	// @[FPU.scala:750:58, Mux.scala:47:70, Reg.scala:19:16, rawFloatFromFN.scala:47:23, :50:34, :56:16, :57:26, :59:15, :60:27]
  wire [2:0]  fpiu_io_in_bits_req_rm = (&(ex_reg_inst[14:12])) ? io_fcsr_rm : ex_reg_inst[14:12];	// @[FPU.scala:820:{18,30,38}, Reg.scala:19:16]
  reg  [1:0]  wen;	// @[FPU.scala:907:20]
  reg  [4:0]  wbInfo_0_rd;	// @[FPU.scala:908:19]
  reg         wbInfo_0_cp;	// @[FPU.scala:908:19]
  reg  [1:0]  wbInfo_0_pipeid;	// @[FPU.scala:908:19]
  reg  [4:0]  wbInfo_1_rd;	// @[FPU.scala:908:19]
  reg         wbInfo_1_cp;	// @[FPU.scala:908:19]
  reg  [1:0]  wbInfo_1_pipeid;	// @[FPU.scala:908:19]
  reg         write_port_busy;	// @[Reg.scala:19:16]
  wire        _wexc_T = wbInfo_0_pipeid == 2'h1;	// @[FPU.scala:908:19, package.scala:33:86, rawFloatFromFN.scala:60:27]
  wire        _GEN = (&wbInfo_0_pipeid) | wbInfo_0_pipeid == 2'h2;	// @[FPU.scala:750:58, :908:19, package.scala:33:{76,86}]
  wire        wb_toint_valid = wb_reg_valid & wb_ctrl_toint;	// @[FPU.scala:768:29, :955:37, Reg.scala:19:16]
  reg  [4:0]  wb_toint_exc;	// @[Reg.scala:19:16]
  wire        _io_nack_mem_output = write_port_busy | (mem_ctrl_div | mem_ctrl_sqrt) & (|wen);	// @[FPU.scala:907:20, :963:{47,65,72}, :965:34, Reg.scala:19:16]
  reg         io_sboard_set_REG;	// @[FPU.scala:968:59]
  wire        _killm_T = io_killm | _io_nack_mem_output;	// @[FPU.scala:761:25, :965:34]
  wire        _wbInfo_1_pipeid_T_2 = mem_ctrl_typeTagOut == 2'h0;	// @[FPU.scala:879:72, Reg.scala:19:16]
  wire        _memLatencyMask_T_3 = mem_ctrl_fma & _wbInfo_1_pipeid_T_2;	// @[FPU.scala:879:{56,72}, Reg.scala:19:16]
  wire        _memLatencyMask_T_5 = mem_ctrl_fastpipe | mem_ctrl_fromint;	// @[FPU.scala:894:72, Reg.scala:19:16]
  wire        mem_wen = mem_reg_valid & (mem_ctrl_fma | mem_ctrl_fastpipe | mem_ctrl_fromint);	// @[FPU.scala:760:30, :909:{31,69}, Reg.scala:19:16]
  wire        _GEN_0 = mem_wen & ~write_port_busy & _memLatencyMask_T_5;	// @[FPU.scala:894:72, :909:31, :914:21, :917:18, :922:{13,52}, :923:22, Reg.scala:19:16]
  wire        _GEN_1 = mem_wen & ~write_port_busy & _memLatencyMask_T_3;	// @[FPU.scala:879:56, :908:19, :909:31, :917:18, :922:{13,52}, :923:22, Reg.scala:19:16]
  always @(posedge clock) begin
    if (reset) begin
      ex_reg_valid <= 1'h0;	// @[FPU.scala:743:29]
      mem_reg_valid <= 1'h0;	// @[FPU.scala:760:30]
      wb_reg_valid <= 1'h0;	// @[FPU.scala:768:29]
      wen <= 2'h0;	// @[FPU.scala:907:20]
    end
    else begin
      ex_reg_valid <= io_valid;	// @[FPU.scala:743:29]
      mem_reg_valid <= ex_reg_valid & ~(io_killx | mem_reg_valid & _killm_T);	// @[FPU.scala:743:29, :760:30, :761:25, :765:{24,41}, :766:{33,36}]
      wb_reg_valid <= mem_reg_valid & ~_killm_T;	// @[FPU.scala:760:30, :761:25, :768:{29,44,48}]
      if (mem_wen & ~_killm_T)	// @[FPU.scala:761:25, :768:48, :909:31, :916:7, :917:18, :918:19, :919:11]
        wen <= {_memLatencyMask_T_3, wen[1] | _memLatencyMask_T_5};	// @[FPU.scala:879:56, :894:72, :907:20, :916:14, :919:23]
      else	// @[FPU.scala:916:7, :917:18, :918:19, :919:11]
        wen <= {1'h0, wen[1]};	// @[FPU.scala:907:20, :916:{7,14}]
    end
    if (io_valid) begin
      ex_reg_inst <= io_inst;	// @[Reg.scala:19:16]
      ex_reg_ctrl_ren2 <= _fp_decoder_io_sigs_ren2;	// @[FPU.scala:739:26, Reg.scala:19:16]
      ex_reg_ctrl_ren3 <= _fp_decoder_io_sigs_ren3;	// @[FPU.scala:739:26, Reg.scala:19:16]
      ex_reg_ctrl_swap23 <= _fp_decoder_io_sigs_swap23;	// @[FPU.scala:739:26, Reg.scala:19:16]
      ex_reg_ctrl_typeTagOut <= _fp_decoder_io_sigs_typeTagOut;	// @[FPU.scala:739:26, Reg.scala:19:16]
      ex_reg_ctrl_fromint <= _fp_decoder_io_sigs_fromint;	// @[FPU.scala:739:26, Reg.scala:19:16]
      ex_reg_ctrl_toint <= _fp_decoder_io_sigs_toint;	// @[FPU.scala:739:26, Reg.scala:19:16]
      ex_reg_ctrl_fastpipe <= _fp_decoder_io_sigs_fastpipe;	// @[FPU.scala:739:26, Reg.scala:19:16]
      ex_reg_ctrl_fma <= _fp_decoder_io_sigs_fma;	// @[FPU.scala:739:26, Reg.scala:19:16]
      ex_reg_ctrl_div <= _fp_decoder_io_sigs_div;	// @[FPU.scala:739:26, Reg.scala:19:16]
      ex_reg_ctrl_sqrt <= _fp_decoder_io_sigs_sqrt;	// @[FPU.scala:739:26, Reg.scala:19:16]
      ex_reg_ctrl_wflags <= _fp_decoder_io_sigs_wflags;	// @[FPU.scala:739:26, Reg.scala:19:16]
      if (_fp_decoder_io_sigs_ren2 & _fp_decoder_io_sigs_swap12)	// @[FPU.scala:739:26, :809:25, :813:25, :814:{29,40}]
        ex_ra_0 <= io_inst[24:20];	// @[FPU.scala:746:31, :814:50]
      else if (_fp_decoder_io_sigs_ren1 & ~_fp_decoder_io_sigs_swap12)	// @[FPU.scala:739:26, :746:31, :809:25, :810:{13,30,41}]
        ex_ra_0 <= io_inst[19:15];	// @[FPU.scala:746:31, :810:51]
      if (_fp_decoder_io_sigs_ren2 & ~_fp_decoder_io_sigs_swap12 & ~_fp_decoder_io_sigs_swap23)	// @[FPU.scala:739:26, :809:25, :813:25, :816:{13,32,49,60}]
        ex_ra_1 <= io_inst[24:20];	// @[FPU.scala:746:31, :816:70]
      else if (_fp_decoder_io_sigs_ren1 & _fp_decoder_io_sigs_swap12)	// @[FPU.scala:739:26, :746:31, :809:25, :811:{29,40}]
        ex_ra_1 <= io_inst[19:15];	// @[FPU.scala:746:31, :811:50]
      if (_fp_decoder_io_sigs_ren3)	// @[FPU.scala:739:26]
        ex_ra_2 <= io_inst[31:27];	// @[FPU.scala:746:31, :818:46]
      else if (_fp_decoder_io_sigs_ren2 & _fp_decoder_io_sigs_swap23)	// @[FPU.scala:739:26, :746:31, :813:25, :815:{29,40}]
        ex_ra_2 <= io_inst[24:20];	// @[FPU.scala:746:31, :815:50]
    end
    load_wb <= io_dmem_resp_val;	// @[FPU.scala:749:24]
    if (io_dmem_resp_val) begin
      load_wb_data <= io_dmem_resp_data;	// @[Reg.scala:19:16]
      load_wb_tag <= io_dmem_resp_tag;	// @[Reg.scala:19:16]
    end
    if (ex_reg_valid) begin	// @[FPU.scala:743:29]
      mem_reg_inst <= ex_reg_inst;	// @[Reg.scala:19:16]
      mem_ctrl_typeTagOut <= ex_reg_ctrl_typeTagOut;	// @[Reg.scala:19:16]
      mem_ctrl_fromint <= ex_reg_ctrl_fromint;	// @[Reg.scala:19:16]
      mem_ctrl_toint <= ex_reg_ctrl_toint;	// @[Reg.scala:19:16]
      mem_ctrl_fastpipe <= ex_reg_ctrl_fastpipe;	// @[Reg.scala:19:16]
      mem_ctrl_fma <= ex_reg_ctrl_fma;	// @[Reg.scala:19:16]
      mem_ctrl_div <= ex_reg_ctrl_div;	// @[Reg.scala:19:16]
      mem_ctrl_sqrt <= ex_reg_ctrl_sqrt;	// @[Reg.scala:19:16]
      mem_ctrl_wflags <= ex_reg_ctrl_wflags;	// @[Reg.scala:19:16]
      write_port_busy <= mem_wen & _memLatencyMask_T_3 & (ex_reg_ctrl_fastpipe | ex_reg_ctrl_fromint);	// @[FPU.scala:879:56, :894:72, :909:31, :910:43, Reg.scala:19:16]
    end
    if (mem_reg_valid)	// @[FPU.scala:760:30]
      wb_ctrl_toint <= mem_ctrl_toint;	// @[Reg.scala:19:16]
    if (_GEN_0) begin	// @[FPU.scala:914:21, :917:18, :922:52, :923:22]
      wbInfo_0_rd <= mem_reg_inst[11:7];	// @[FPU.scala:908:19, :926:37, Reg.scala:19:16]
      wbInfo_0_pipeid <= {mem_ctrl_fma & _wbInfo_1_pipeid_T_2, mem_ctrl_fromint};	// @[FPU.scala:879:{56,72}, :896:100, :908:19, Reg.scala:19:16]
    end
    else if (wen[1]) begin	// @[FPU.scala:907:20, :914:14]
      wbInfo_0_rd <= wbInfo_1_rd;	// @[FPU.scala:908:19]
      wbInfo_0_pipeid <= wbInfo_1_pipeid;	// @[FPU.scala:908:19]
    end
    wbInfo_0_cp <= ~_GEN_0 & (wen[1] ? wbInfo_1_cp : wbInfo_0_cp);	// @[FPU.scala:907:20, :908:19, :914:{14,21,33}, :917:18, :922:52, :923:22]
    if (_GEN_1) begin	// @[FPU.scala:908:19, :917:18, :922:52, :923:22]
      wbInfo_1_rd <= mem_reg_inst[11:7];	// @[FPU.scala:908:19, :926:37, Reg.scala:19:16]
      wbInfo_1_pipeid <= {mem_ctrl_fma & _wbInfo_1_pipeid_T_2, mem_ctrl_fromint};	// @[FPU.scala:879:{56,72}, :896:100, :908:19, Reg.scala:19:16]
    end
    wbInfo_1_cp <= ~_GEN_1 & wbInfo_1_cp;	// @[FPU.scala:908:19, :917:18, :922:52, :923:22]
    if (mem_ctrl_toint)	// @[Reg.scala:19:16]
      wb_toint_exc <= _fpiu_io_out_bits_exc;	// @[FPU.scala:847:20, Reg.scala:19:16]
    io_sboard_set_REG <= mem_ctrl_div | mem_ctrl_sqrt;	// @[FPU.scala:968:{59,111}, Reg.scala:19:16]
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    logic [31:0] _RANDOM_5;
    logic [31:0] _RANDOM_6;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        ex_reg_valid = _RANDOM_0[1];	// @[FPU.scala:743:29]
        ex_reg_inst = {_RANDOM_0[31:2], _RANDOM_1[1:0]};	// @[FPU.scala:743:29, Reg.scala:19:16]
        ex_reg_ctrl_ren2 = _RANDOM_1[5];	// @[Reg.scala:19:16]
        ex_reg_ctrl_ren3 = _RANDOM_1[6];	// @[Reg.scala:19:16]
        ex_reg_ctrl_swap23 = _RANDOM_1[8];	// @[Reg.scala:19:16]
        ex_reg_ctrl_typeTagOut = _RANDOM_1[12:11];	// @[Reg.scala:19:16]
        ex_reg_ctrl_fromint = _RANDOM_1[13];	// @[Reg.scala:19:16]
        ex_reg_ctrl_toint = _RANDOM_1[14];	// @[Reg.scala:19:16]
        ex_reg_ctrl_fastpipe = _RANDOM_1[15];	// @[Reg.scala:19:16]
        ex_reg_ctrl_fma = _RANDOM_1[16];	// @[Reg.scala:19:16]
        ex_reg_ctrl_div = _RANDOM_1[17];	// @[Reg.scala:19:16]
        ex_reg_ctrl_sqrt = _RANDOM_1[18];	// @[Reg.scala:19:16]
        ex_reg_ctrl_wflags = _RANDOM_1[19];	// @[Reg.scala:19:16]
        ex_ra_0 = _RANDOM_1[24:20];	// @[FPU.scala:746:31, Reg.scala:19:16]
        ex_ra_1 = _RANDOM_1[29:25];	// @[FPU.scala:746:31, Reg.scala:19:16]
        ex_ra_2 = {_RANDOM_1[31:30], _RANDOM_2[2:0]};	// @[FPU.scala:746:31, Reg.scala:19:16]
        load_wb = _RANDOM_2[3];	// @[FPU.scala:746:31, :749:24]
        load_wb_data = {_RANDOM_2[31:6], _RANDOM_3[5:0]};	// @[FPU.scala:746:31, Reg.scala:19:16]
        load_wb_tag = _RANDOM_3[10:6];	// @[Reg.scala:19:16]
        mem_reg_valid = _RANDOM_3[13];	// @[FPU.scala:760:30, Reg.scala:19:16]
        mem_reg_inst = {_RANDOM_3[31:14], _RANDOM_4[13:0]};	// @[Reg.scala:19:16]
        wb_reg_valid = _RANDOM_4[14];	// @[FPU.scala:768:29, Reg.scala:19:16]
        mem_ctrl_typeTagOut = _RANDOM_4[25:24];	// @[Reg.scala:19:16]
        mem_ctrl_fromint = _RANDOM_4[26];	// @[Reg.scala:19:16]
        mem_ctrl_toint = _RANDOM_4[27];	// @[Reg.scala:19:16]
        mem_ctrl_fastpipe = _RANDOM_4[28];	// @[Reg.scala:19:16]
        mem_ctrl_fma = _RANDOM_4[29];	// @[Reg.scala:19:16]
        mem_ctrl_div = _RANDOM_4[30];	// @[Reg.scala:19:16]
        mem_ctrl_sqrt = _RANDOM_4[31];	// @[Reg.scala:19:16]
        mem_ctrl_wflags = _RANDOM_5[0];	// @[Reg.scala:19:16]
        wb_ctrl_toint = _RANDOM_5[13];	// @[Reg.scala:19:16]
        wen = _RANDOM_5[25:24];	// @[FPU.scala:907:20, Reg.scala:19:16]
        wbInfo_0_rd = _RANDOM_5[30:26];	// @[FPU.scala:908:19, Reg.scala:19:16]
        wbInfo_0_cp = _RANDOM_6[0];	// @[FPU.scala:908:19]
        wbInfo_0_pipeid = _RANDOM_6[2:1];	// @[FPU.scala:908:19]
        wbInfo_1_rd = _RANDOM_6[7:3];	// @[FPU.scala:908:19]
        wbInfo_1_cp = _RANDOM_6[9];	// @[FPU.scala:908:19]
        wbInfo_1_pipeid = _RANDOM_6[11:10];	// @[FPU.scala:908:19]
        write_port_busy = _RANDOM_6[12];	// @[FPU.scala:908:19, Reg.scala:19:16]
        wb_toint_exc = _RANDOM_6[17:13];	// @[FPU.scala:908:19, Reg.scala:19:16]
        io_sboard_set_REG = _RANDOM_6[18];	// @[FPU.scala:908:19, :968:59]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  FPUDecoder fp_decoder (	// @[FPU.scala:739:26]
    .io_inst            (io_inst),
    .io_sigs_wen        (io_dec_wen),
    .io_sigs_ren1       (_fp_decoder_io_sigs_ren1),
    .io_sigs_ren2       (_fp_decoder_io_sigs_ren2),
    .io_sigs_ren3       (_fp_decoder_io_sigs_ren3),
    .io_sigs_swap12     (_fp_decoder_io_sigs_swap12),
    .io_sigs_swap23     (_fp_decoder_io_sigs_swap23),
    .io_sigs_typeTagOut (_fp_decoder_io_sigs_typeTagOut),
    .io_sigs_fromint    (_fp_decoder_io_sigs_fromint),
    .io_sigs_toint      (_fp_decoder_io_sigs_toint),
    .io_sigs_fastpipe   (_fp_decoder_io_sigs_fastpipe),
    .io_sigs_fma        (_fp_decoder_io_sigs_fma),
    .io_sigs_div        (_fp_decoder_io_sigs_div),
    .io_sigs_sqrt       (_fp_decoder_io_sigs_sqrt),
    .io_sigs_wflags     (_fp_decoder_io_sigs_wflags)
  );
  regfile_combMem regfile_ext (	// @[FPU.scala:793:20]
    .R0_addr (ex_ra_0),	// @[FPU.scala:746:31]
    .R0_en   (1'h1),	// @[FPU.scala:968:36]
    .R0_clk  (clock),
    .R1_addr (ex_ra_1),	// @[FPU.scala:746:31]
    .R1_en   (1'h1),	// @[FPU.scala:968:36]
    .R1_clk  (clock),
    .R2_addr (ex_ra_2),	// @[FPU.scala:746:31]
    .R2_en   (1'h1),	// @[FPU.scala:968:36]
    .R2_clk  (clock),
    .W0_addr (load_wb_tag),	// @[Reg.scala:19:16]
    .W0_en   (load_wb),	// @[FPU.scala:749:24]
    .W0_clk  (clock),
    .W0_data ({load_wb_data[31], (wdata_rawIn_isZeroExpIn & ~(|(load_wb_data[22:0])) ? 3'h0 : wdata_rawIn_adjustedExp[8:6]) | {2'h0, (&(wdata_rawIn_adjustedExp[8:7])) & (|(load_wb_data[22:0]))}, wdata_rawIn_adjustedExp[5:0], wdata_rawIn_isZeroExpIn ? {_wdata_rawIn_subnormFract_T[21:0], 1'h0} : load_wb_data[22:0]}),	// @[Cat.scala:33:92, Reg.scala:19:16, rawFloatFromFN.scala:46:22, :48:25, :50:34, :51:38, :54:{36,47,64}, :59:15, :62:34, :63:{37,62}, :66:33, :72:42, recFNFromFN.scala:48:{16,53,79}, :50:23]
    .W1_addr (wbInfo_0_rd),	// @[FPU.scala:908:19]
    .W1_en   (~wbInfo_0_cp & wen[0]),	// @[FPU.scala:907:20, :908:19, :935:{10,24,30}]
    .W1_clk  (clock),
    .W1_data (_GEN ? _sfma_io_out_bits_data : _wexc_T ? _ifpu_io_out_bits_data : _fpmu_io_out_bits_data),	// @[FPU.scala:843:20, :857:20, :862:20, package.scala:33:{76,86}]
    .R0_data (_regfile_ext_R0_data),
    .R1_data (_regfile_ext_R1_data),
    .R2_data (_regfile_ext_R2_data)
  );
  FPUFMAPipe sfma (	// @[FPU.scala:843:20]
    .clock             (clock),
    .reset             (reset),
    .io_in_valid       (ex_reg_valid & ex_reg_ctrl_fma & ex_reg_ctrl_typeTagOut == 2'h0),	// @[FPU.scala:743:29, :844:{48,70}, Reg.scala:19:16]
    .io_in_bits_ren3   (ex_reg_ctrl_ren3),	// @[Reg.scala:19:16]
    .io_in_bits_swap23 (ex_reg_ctrl_swap23),	// @[Reg.scala:19:16]
    .io_in_bits_rm     (fpiu_io_in_bits_req_rm),	// @[FPU.scala:820:18]
    .io_in_bits_fmaCmd (ex_reg_inst[3:2] | {1'h0, ~ex_reg_ctrl_ren3 & ex_reg_inst[27]}),	// @[FPU.scala:832:{30,36,39,53,67}, Reg.scala:19:16]
    .io_in_bits_in1    (_regfile_ext_R0_data),	// @[FPU.scala:793:20]
    .io_in_bits_in2    (_regfile_ext_R1_data),	// @[FPU.scala:793:20]
    .io_in_bits_in3    (_regfile_ext_R2_data),	// @[FPU.scala:793:20]
    .io_out_bits_data  (_sfma_io_out_bits_data),
    .io_out_bits_exc   (_sfma_io_out_bits_exc)
  );
  FPToInt fpiu (	// @[FPU.scala:847:20]
    .clock             (clock),
    .io_in_valid       (ex_reg_valid & (ex_reg_ctrl_toint | ex_reg_ctrl_div | ex_reg_ctrl_sqrt | ex_reg_ctrl_fastpipe & ex_reg_ctrl_wflags)),	// @[FPU.scala:743:29, :848:{33,82,103}, Reg.scala:19:16]
    .io_in_bits_ren2   (ex_reg_ctrl_ren2),	// @[Reg.scala:19:16]
    .io_in_bits_wflags (ex_reg_ctrl_wflags),	// @[Reg.scala:19:16]
    .io_in_bits_rm     (fpiu_io_in_bits_req_rm),	// @[FPU.scala:820:18]
    .io_in_bits_typ    (ex_reg_inst[21:20]),	// @[FPU.scala:830:27, Reg.scala:19:16]
    .io_in_bits_fmt    (ex_reg_inst[26:25]),	// @[FPU.scala:831:27, Reg.scala:19:16]
    .io_in_bits_in1    (_regfile_ext_R0_data),	// @[FPU.scala:793:20]
    .io_in_bits_in2    (_regfile_ext_R1_data),	// @[FPU.scala:793:20]
    .io_out_bits_lt    (_fpiu_io_out_bits_lt),
    .io_out_bits_store (io_store_data),
    .io_out_bits_toint (io_toint_data),
    .io_out_bits_exc   (_fpiu_io_out_bits_exc)
  );
  IntToFP ifpu (	// @[FPU.scala:857:20]
    .clock             (clock),
    .reset             (reset),
    .io_in_valid       (ex_reg_valid & ex_reg_ctrl_fromint),	// @[FPU.scala:743:29, :858:33, Reg.scala:19:16]
    .io_in_bits_wflags (ex_reg_ctrl_wflags),	// @[Reg.scala:19:16]
    .io_in_bits_rm     (fpiu_io_in_bits_req_rm),	// @[FPU.scala:820:18]
    .io_in_bits_typ    (ex_reg_inst[21:20]),	// @[FPU.scala:830:27, Reg.scala:19:16]
    .io_in_bits_in1    (io_fromint_data),
    .io_out_bits_data  (_ifpu_io_out_bits_data),
    .io_out_bits_exc   (_ifpu_io_out_bits_exc)
  );
  FPToFP fpmu (	// @[FPU.scala:862:20]
    .clock             (clock),
    .reset             (reset),
    .io_in_valid       (ex_reg_valid & ex_reg_ctrl_fastpipe),	// @[FPU.scala:743:29, :863:33, Reg.scala:19:16]
    .io_in_bits_wflags (ex_reg_ctrl_wflags),	// @[Reg.scala:19:16]
    .io_in_bits_rm     (fpiu_io_in_bits_req_rm),	// @[FPU.scala:820:18]
    .io_in_bits_in1    (_regfile_ext_R0_data),	// @[FPU.scala:793:20]
    .io_in_bits_in2    (_regfile_ext_R1_data),	// @[FPU.scala:793:20]
    .io_lt             (_fpiu_io_out_bits_lt),	// @[FPU.scala:847:20]
    .io_out_bits_data  (_fpmu_io_out_bits_data),
    .io_out_bits_exc   (_fpmu_io_out_bits_exc)
  );
  assign io_fcsr_flags_valid = wb_toint_valid | wen[0];	// @[FPU.scala:907:20, :935:30, :955:37, :957:56]
  assign io_fcsr_flags_bits = (wb_toint_valid ? wb_toint_exc : 5'h0) | (wen[0] ? (_GEN ? _sfma_io_out_bits_exc : _wexc_T ? _ifpu_io_out_bits_exc : _fpmu_io_out_bits_exc) : 5'h0);	// @[FPU.scala:843:20, :857:20, :862:20, :907:20, :935:30, :955:37, :959:8, :960:42, :961:8, Reg.scala:19:16, package.scala:33:{76,86}]
  assign io_fcsr_rdy = ~(ex_reg_valid & ex_reg_ctrl_wflags | mem_reg_valid & mem_ctrl_wflags | wb_toint_valid | (|wen));	// @[FPU.scala:743:29, :760:30, :907:20, :955:37, :963:72, :964:{18,33,68,120}, Reg.scala:19:16]
  assign io_nack_mem = _io_nack_mem_output;	// @[FPU.scala:965:34]
  assign io_illegal_rm = _fp_decoder_io_sigs_div | _fp_decoder_io_sigs_sqrt | io_inst[14:12] == 3'h5 | io_inst[14:12] == 3'h6 | (&(io_inst[14:12])) & io_fcsr_rm > 3'h4;	// @[FPU.scala:739:26, :973:{17,27,71,79,93}, :1008:{40,56}, Mux.scala:47:70, package.scala:16:47]
  assign io_dec_ren1 = _fp_decoder_io_sigs_ren1;	// @[FPU.scala:739:26]
  assign io_dec_ren2 = _fp_decoder_io_sigs_ren2;	// @[FPU.scala:739:26]
  assign io_dec_ren3 = _fp_decoder_io_sigs_ren3;	// @[FPU.scala:739:26]
  assign io_sboard_set = wb_reg_valid & io_sboard_set_REG;	// @[FPU.scala:768:29, :968:{49,59}]
endmodule

